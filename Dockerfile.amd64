# AMD64架构优化的多阶段构建 Dockerfile
# 阶段1: 构建阶段
FROM --platform=linux/amd64 python:3.12-slim as builder

# 设置环境变量
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# 安装构建依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# 安装uv包管理器（更快的Python包管理器）
RUN pip install --no-cache-dir uv

# 设置工作目录
WORKDIR /app

# 复制依赖文件
COPY requirements-docker-build-amd64.txt ./

# 创建虚拟环境并安装依赖
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN uv pip install --no-cache -r requirements-docker-build-amd64.txt

# 阶段2: 运行阶段
FROM --platform=linux/amd64 python:3.12-slim as runtime

# 设置环境变量
ENV PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PORT=8000 \
    PATH="/opt/venv/bin:$PATH"

# 安装运行时依赖（仅必需的系统库）
RUN apt-get update && apt-get install -y --no-install-recommends \
    # OCR支持（仅基础tesseract）
    tesseract-ocr \
    tesseract-ocr-chi-sim \
    tesseract-ocr-eng \
    # 基础系统库
    libglib2.0-0 \
    # 网络工具（健康检查需要）
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# 从构建阶段复制虚拟环境
COPY --from=builder /opt/venv /opt/venv

# 设置工作目录
WORKDIR /app

# 复制应用程序文件
COPY . .

# 创建必要的目录
RUN mkdir -p vector_db logs && \
    # 清理不必要的文件
    find . -type f -name "*.pyc" -delete && \
    find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true && \
    # 创建非root用户
    adduser --disabled-password --gecos '' --uid 1000 appuser && \
    chown -R appuser:appuser /app

# 切换到非root用户
USER appuser

# 暴露端口
EXPOSE 8000

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/ || exit 1

# 启动命令
CMD ["python", "server.py"] 